{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "793bcaca-ed3e-4b22-a758-f1bb6c6e91d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "GET and POST are two of the HTTP methods used for communicating with web servers:\n",
    "\n",
    "GET: The GET method is used to request data from a specified resource. When you use a web browser to visit a website, it typically sends GET requests to the server to retrieve HTML pages, images, or other resources. GET requests can have parameters appended to the URL, and they are visible in the browser's address bar. GET requests should not be used for sensitive data as the data is exposed in the URL.\n",
    "\n",
    "POST: The POST method is used to send data to be processed by the resource identified by the URL. Unlike GET, POST requests send data in the request body, making it suitable for sending sensitive or large amounts of data. For example, when you submit a form on a website, the form data is usually sent to the server using a POST request. POST requests are not visible in the URL."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6f1a03b-bf0d-473e-9622-30173bd6ed96",
   "metadata": {},
   "outputs": [],
   "source": [
    "In Flask, the request object is used to access incoming HTTP request data, including form data, query parameters, headers, and more. It allows the Flask application to interact with the data sent by the client (e.g., a web browser) in order to process the request and generate a response. The request object is essential for handling user input and making decisions based on the client's request.\n",
    "\n",
    "Common use cases for the request object in Flask include:\n",
    "\n",
    "Accessing form data submitted by users.\n",
    "Retrieving query parameters from the URL.\n",
    "Checking request headers, such as the user agent or content type.\n",
    "Handling file uploads, if applicable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2fd6e8ae-5c4f-4389-9315-47a6cb83f886",
   "metadata": {},
   "outputs": [],
   "source": [
    "In Flask, the redirect() function is used to perform URL redirection. It allows you to send the client's browser to a different URL, either within your application or to an external resource. This is useful for scenarios like:\n",
    "\n",
    "Redirecting users to a different page after they perform an action (e.g., submitting a form).\n",
    "Implementing URL aliases or friendly URLs.\n",
    "Handling route changes or moving resources.\n",
    "For example, after processing a form submission, you might want to redirect the user to a thank-you page or back to the home page to display a success message. redirect() simplifies this process by specifying the target URL."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bd0b9d4-422d-4a60-84b5-7e49b8e8a455",
   "metadata": {},
   "outputs": [],
   "source": [
    "In Flask, templates are used to separate the presentation (HTML content) from the application logic. Templates are HTML files with placeholders for dynamic content. They allow you to create reusable and maintainable HTML pages by injecting data into them dynamically.\n",
    "\n",
    "The render_template() function in Flask is used to render these HTML templates. It takes the name of the template file as an argument and can also pass data to the template, which can be used to fill in the placeholders. The primary reasons for using templates and render_template() are:\n",
    "\n",
    "Separation of Concerns: Templates separate the user interface (HTML) from the application logic (Python code), making the codebase cleaner and more maintainable.\n",
    "\n",
    "Reusability: Templates can be reused across multiple routes or views within your Flask application.Dynamic Content: By passing data to templates, you can generate dynamic content, such as displaying user-specific data or data retrieved from a database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ecffed7d-c8c2-48ec-b6b8-e4cbe6916ff7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask, jsonify\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/api/hello', methods=['GET'])\n",
    "def hello():\n",
    "    return jsonify(message=\"Hello, World!\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
