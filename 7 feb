{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ceec3256-f015-4799-938c-7798ed6b9ec5",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-1import re\n",
    "\n",
    "def validate_password(password):\n",
    "    # Check the length of the password\n",
    "    if len(password) != 10:\n",
    "        return \"Invalid Password\"\n",
    "    \n",
    "    # Count uppercase and lowercase letters\n",
    "    uppercase_count = sum(1 for char in password if char.isupper())\n",
    "    lowercase_count = sum(1 for char in password if char.islower())\n",
    "    \n",
    "    # Count digits and special characters using regex\n",
    "    digit_count = len(re.findall(r'\\d', password))\n",
    "    special_char_count = len(re.findall(r'[!@#$%^&*()-=_+]', password))\n",
    "    \n",
    "    # Check if all conditions are met\n",
    "    if uppercase_count >= 2 and lowercase_count >= 2 and digit_count >= 1 and special_char_count >= 3:\n",
    "        return \"Valid Password\"\n",
    "    else:\n",
    "        return \"Invalid Password\"\n",
    "\n",
    "# Example usage:\n",
    "password = input(\"Enter a password: \")\n",
    "result = validate_password(password)\n",
    "print(result)\n",
    "This function uses regular expressions to count digits and special characters and checks if all conditions are met before returning \"Valid Password\" or \"Invalid Password.\"\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5587040-72ce-4cc8-b06d-c70fcd919edd",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-2Q2: Solving Questions Using Various Techniques\n",
    "\n",
    "Here are solutions to some of the listed questions using different techniques:\n",
    "\n",
    "Check if the string starts with a particular letter using a lambda function:\n",
    "starts_with_letter = lambda s, letter: s.startswith(letter)\n",
    "print(starts_with_letter(\"Python\", \"P\"))  # True\n",
    "Check if the string is numeric using a lambda function:\n",
    "is_numeric = lambda s: s.isnumeric()\n",
    "print(is_numeric(\"12345\"))  # True\n",
    "Sort a list of tuples with fruit names and quantities:\n",
    "fruits = [(\"mango\", 99), (\"orange\", 80), (\"grapes\", 1000)]\n",
    "sorted_fruits = sorted(fruits, key=lambda x: x[1])\n",
    "print(sorted_fruits)\n",
    "Find the squares of numbers from 1 to 10 using list comprehension:\n",
    "squares = [x**2 for x in range(1, 11)]\n",
    "print(squares)\n",
    "Find the cube root of numbers from 1 to 10 using list comprehension:\n",
    "import math\n",
    "cube_roots = [math.pow(x, 1/3) for x in range(1, 11)]\n",
    "print(cube_roots)\n",
    "Check if a given number is even using a lambda function:\n",
    "is_even = lambda num: num % 2 == 0\n",
    "print(is_even(6))  # True\n",
    "Filter odd numbers from a given list using the filter function:\n",
    "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "odd_numbers = list(filter(lambda x: x % 2 != 0, numbers))\n",
    "print(odd_numbers)\n",
    "Sort a list of integers into positive and negative integers lists using list comprehension:\n",
    "numbers = [1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, 0]\n",
    "positive_numbers = [x for x in numbers if x > 0]\n",
    "negative_numbers = [x for x in numbers if x < 0]\n",
    "print(positive_numbers)\n",
    "print(negative_numbers)\n",
    "These solutions use various Python techniques like lambda functions, list comprehensions, and the filter function to perform the specified tasks.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f297b55-2d5c-4238-a3ba-67df0e5bce7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f352738-8e4b-4935-ae3e-6928f7184077",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd13e1f0-2264-4a75-b557-a38195fefd86",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-5"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
