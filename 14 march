{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "922ccc1a-efc8-4479-80b6-80b5fb6e68fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1. Here's a Python function that calculates the F-value and corresponding p-value for a variance ratio test (F-test) given two arrays of data:\n",
    "\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "\n",
    "def calculate_f_value(data1, data2):\n",
    "    # Calculate the variances of the two datasets\n",
    "    var1 = np.var(data1, ddof=1)  # ddof=1 for sample variance\n",
    "    var2 = np.var(data2, ddof=1)\n",
    "    \n",
    "    # Calculate the F-value\n",
    "    f_value = var1 / var2\n",
    "    \n",
    "    # Calculate degrees of freedom\n",
    "    df1 = len(data1) - 1\n",
    "    df2 = len(data2) - 1\n",
    "    \n",
    "    # Calculate the p-value\n",
    "    p_value = 1 - stats.f.cdf(f_value, df1, df2)\n",
    "    \n",
    "    return f_value, p_value\n",
    "\n",
    "# Example usage:\n",
    "data1 = [sample data]\n",
    "data2 = [sample data]\n",
    "f_value, p_value = calculate_f_value(data1, data2)\n",
    "print(\"F-value:\", f_value)\n",
    "print(\"p-value:\", p_value)\n",
    "Q2. To calculate the critical F-value for a two-tailed test with a significance level of 0.05 and given degrees of freedom for the numerator (df1) and denominator (df2) of an F-distribution, you can use the scipy.stats library:\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "def calculate_critical_f(df1, df2):\n",
    "    alpha = 0.05\n",
    "    critical_f = stats.f.ppf(1 - alpha/2, df1, df2)\n",
    "    return critical_f\n",
    "\n",
    "# Example usage:\n",
    "df1 = degrees of freedom for numerator\n",
    "df2 = degrees of freedom for denominator\n",
    "critical_f = calculate_critical_f(df1, df2)\n",
    "print(\"Critical F-value:\", critical_f)\n",
    "Q3. Here's a Python program that generates random samples from two normal distributions, calculates the F-value, degrees of freedom, and p-value for an F-test to determine if the variances are equal:\n",
    "\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Generate random samples from two normal distributions\n",
    "np.random.seed(42)\n",
    "sample_size1 = 30\n",
    "sample_size2 = 40\n",
    "mean1 = 0\n",
    "std1 = 2\n",
    "mean2 = 0\n",
    "std2 = 3\n",
    "\n",
    "sample1 = np.random.normal(mean1, std1, sample_size1)\n",
    "sample2 = np.random.normal(mean2, std2, sample_size2)\n",
    "\n",
    "# Perform F-test\n",
    "variance1 = np.var(sample1, ddof=1)\n",
    "variance2 = np.var(sample2, ddof=1)\n",
    "\n",
    "f_value = variance1 / variance2\n",
    "df1 = sample_size1 - 1\n",
    "df2 = sample_size2 - 1\n",
    "p_value = 1 - stats.f.cdf(f_value, df1, df2)\n",
    "\n",
    "print(\"F-value:\", f_value)\n",
    "print(\"Degrees of Freedom (df1, df2):\", df1, df2)\n",
    "print(\"p-value:\", p_value)\n",
    "Q4. To conduct an F-test at the 5% significance level to determine if the variances of two populations with known variances (10 and 15) are significantly different, you can use the following code:\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Known population variances\n",
    "variance1 = 10\n",
    "variance2 = 15\n",
    "\n",
    "# Sample sizes\n",
    "n1 = 12\n",
    "n2 = 12\n",
    "\n",
    "# Calculate the F-statistic\n",
    "f_statistic = variance1 / variance2\n",
    "\n",
    "# Degrees of freedom\n",
    "df1 = n1 - 1\n",
    "df2 = n2 - 1\n",
    "\n",
    "# Calculate the critical F-value for alpha = 0.05 (two-tailed)\n",
    "alpha = 0.05\n",
    "critical_f = stats.f.ppf(1 - alpha/2, df1, df2)\n",
    "\n",
    "# Calculate the p-value\n",
    "p_value = 2 * min(stats.f.cdf(f_statistic, df1, df2), 1 - stats.f.cdf(f_statistic, df1, df2))\n",
    "\n",
    "print(\"F-statistic:\", f_statistic)\n",
    "print(\"Degrees of Freedom (df1, df2):\", df1, df2)\n",
    "print(\"Critical F-value:\", critical_f)\n",
    "print(\"p-value:\", p_value)\n",
    "\n",
    "# Check if the variances are significantly different\n",
    "if p_value < alpha:\n",
    "    print(\"The variances are significantly different.\")\n",
    "else:\n",
    "    print(\"There is no significant difference in variances.\")\n",
    "Q5. To conduct an F-test at the 1% significance level to determine if the manufacturer's claim about the variance of product diameter is justified, you can use the following Python code:\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Known population variance claim\n",
    "claim_variance = 0.005\n",
    "\n",
    "# Sample size\n",
    "n = 25\n",
    "\n",
    "# Sample variance\n",
    "sample_variance = 0.006\n",
    "\n",
    "# Calculate the F-statistic\n",
    "f_statistic = sample_variance / claim_variance\n",
    "\n",
    "# Degrees of freedom\n",
    "df1 = n - 1\n",
    "df2 = 1  # Degrees of freedom for the claim\n",
    "\n",
    "# Calculate the critical F-value for alpha = 0.01 (two-tailed)\n",
    "alpha = 0.01\n",
    "critical_f = stats.f.ppf(1 - alpha/2, df1, df2)\n",
    "\n",
    "# Calculate the p-value\n",
    "p_value = 2 * min(stats.f.cdf(f_statistic, df1, df2), 1 - stats.f.cdf(f_statistic, df1, df2))\n",
    "\n",
    "print(\"F-statistic:\", f_statistic)\n",
    "print(\"Degrees of Freedom (df1, df2):\", df1, df2)\n",
    "print(\"Critical F-value:\", critical_f)\n",
    "print(\"p-value:\", p_value)\n",
    "\n",
    "# Check if the claim is justified\n",
    "if p_value < alpha:\n",
    "    print(\"The manufacturer's claim is not justified.\")\n",
    "else:\n",
    "    print(\"The manufacturer's claim is justified.\")\n",
    "Q6. Here's a Python function that calculates the mean and variance of an F-distribution given the degrees of freedom for the numerator (df1) and denominator (df2):\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "def calculate_f_distribution_mean_and_variance(df1, df2):\n",
    "    mean = df2 / (df2 - 2) if df2 > 2 else None\n",
    "    variance = (2 * df2**2 * (df1 + df2 - 2)) / (df1 * (df2 - 2)**2 * (df2 - 4)) if df2 > 4 else None\n",
    "    return mean, variance\n",
    "\n",
    "# Example usage:\n",
    "df1 = degrees of freedom for numerator\n",
    "df2 = degrees of freedom for denominator\n",
    "mean, variance = calculate_f_distribution_mean_and_variance(df1, df2)\n",
    "print(\"Mean of F-distribution:\", mean)\n",
    "print(\"Variance of F-distribution:\", variance)\n",
    "Q7. To conduct an F-test at the 10% significance level to determine if the variances of two populations with unknown variances (sample variances of 25 and 20) are significantly different, you can use the following code:\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Sample variances\n",
    "sample_variance1 = 25\n",
    "sample_variance2 = 20\n",
    "\n",
    "# Sample sizes\n",
    "n1 = 10\n",
    "n2 = 15\n",
    "\n",
    "# Calculate the F-statistic\n",
    "f_statistic = sample_variance1 / sample_variance2\n",
    "\n",
    "# Degrees of freedom\n",
    "df1 = n1 - 1\n",
    "df2 = n2 - 1\n",
    "\n",
    "# Calculate the critical F-value for alpha = 0.10 (two-tailed)\n",
    "alpha = 0.10\n",
    "critical_f = stats.f.ppf(1 - alpha/2, df1, df2)\n",
    "\n",
    "# Calculate the p-value\n",
    "p_value = 2 * min(stats.f.cdf(f_statistic, df1, df2), 1 - stats.f.cdf(f_statistic, df1, df2))\n",
    "\n",
    "print(\"F-statistic:\", f_statistic)\n",
    "print(\"Degrees of Freedom (df1, df2):\", df1, df2)\n",
    "print(\"Critical F-value:\", critical_f)\n",
    "print(\"p-value:\", p_value)\n",
    "\n",
    "# Check if the variances are significantly different\n",
    "if p_value < alpha:\n",
    "    print(\"The variances are significantly different.\")\n",
    "else:\n",
    "    print(\"There is no significant difference in variances.\")\n",
    "Q8. To conduct an F-test at the 5% significance level to determine if the waiting times in minutes at two different restaurants (Restaurant A and Restaurant B) on a Saturday night have significantly different variances, you can use the following code:\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Waiting times data for both restaurants\n",
    "restaurant_A = [24, 25, 28, 23, 22, 20, 27]\n",
    "restaurant_B = [31, 33, 35, 30, 32, 36]\n",
    "\n",
    "# Calculate the variances\n",
    "variance_A = np.var(restaurant_A, ddof=1)\n",
    "variance_B = np.var(restaurant_B, ddof=1)\n",
    "\n",
    "# Sample sizes\n",
    "n_A = len(restaurant_A)\n",
    "n_B = len(restaurant_B)\n",
    "\n",
    "# Calculate the F-statistic\n",
    "f_statistic = variance_A / variance_B\n",
    "\n",
    "# Degrees of freedom\n",
    "df1 = n_A - 1\n",
    "df2 = n_B - 1\n",
    "\n",
    "# Calculate the critical F-value for alpha = 0.05 (two-tailed)\n",
    "alpha = 0.05\n",
    "critical_f = stats.f.ppf(1 - alpha/2, df1, df2)\n",
    "\n",
    "# Calculate the p-value\n",
    "p_value = 2 * min(stats.f.cdf(f_statistic, df1, df2), 1 - stats.f.cdf(f_statistic, df1, df2))\n",
    "\n",
    "print(\"F-statistic:\", f_statistic)\n",
    "print(\"Degrees of Freedom (df1, df2):\", df1, df2)\n",
    "print(\"Critical F-value:\", critical_f)\n",
    "print(\"p-value:\", p_value)\n",
    "\n",
    "# Check if the variances are significantly different\n",
    "if p_value < alpha:\n",
    "    print(\"The variances of waiting times are significantly different between the two restaurants.\")\n",
    "else:\n",
    "    print(\"There is no significant difference in variances between the two restaurants.\")\n",
    "Q9. To conduct an F-test at the 1% significance level to determine if the test scores of two groups of students (Group A and Group B) have significantly different variances, you can use the following code:\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Test scores data for both groups\n",
    "group_A_scores = [80, 85, 90, 92, 87, 83]\n",
    "group_B_scores = [75, 78, 82, 79, 81, 84]\n",
    "\n",
    "# Calculate the variances\n",
    "variance_A = np.var(group_A_scores, ddof=1)\n",
    "variance_B = np.var(group_B_scores, ddof=1)\n",
    "\n",
    "# Sample sizes\n",
    "n_A = len(group_A_scores)\n",
    "n_B = len(group_B_scores)\n",
    "\n",
    "# Calculate the F-statistic\n",
    "f_statistic = variance_A / variance_B\n",
    "\n",
    "# Degrees of freedom\n",
    "df1 = n_A - 1\n",
    "df2 = n_B - 1\n",
    "\n",
    "# Calculate the critical F-value for alpha = 0.01 (two-tailed)\n",
    "alpha = 0.01\n",
    "critical_f = stats.f.ppf(1 - alpha/2, df1, df2)\n",
    "\n",
    "# Calculate the p-value\n",
    "p_value = 2 * min(stats.f.cdf(f_statistic, df1, df2), 1 - stats.f.cdf(f_statistic, df1, df2))\n",
    "\n",
    "print(\"F-statistic:\", f_statistic)\n",
    "print(\"Degrees of Freedom (df1, df2):\", df1, df2)\n",
    "print(\"Critical F-value:\", critical_f)\n",
    "print(\"p-value:\", p_value)\n",
    "\n",
    "# Check if the variances are significantly different\n",
    "if p_value < alpha:\n",
    "    print(\"The variances of test scores are significantly different between the two groups.\")\n",
    "else:\n",
    "    print(\"There is no significant difference in variances between the two groups.\")\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
