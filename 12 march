{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f5e46d5-40d9-4d28-9afa-59e97b1428c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats as stats\n",
    "\n",
    "# Sample data\n",
    "sample_mean = 50\n",
    "sample_std_dev = 5\n",
    "sample_size = # Your sample size\n",
    "\n",
    "# Confidence level\n",
    "confidence_level = 0.95\n",
    "\n",
    "# Calculate the margin of error (MOE)\n",
    "margin_of_error = stats.norm.ppf((1 + confidence_level) / 2) * (sample_std_dev / (sample_size ** 0.5))\n",
    "\n",
    "# Calculate the confidence interval\n",
    "confidence_interval = (sample_mean - margin_of_error, sample_mean + margin_of_error)\n",
    "\n",
    "print(\"95% Confidence Interval:\", confidence_interval)\n",
    "Interpretation: We are 95% confident that the true population mean falls within the interval [lower bound, upper bound]. In this case, it might be something like [47.22, 52.78].\n",
    "\n",
    "Q2: To conduct a chi-square goodness of fit test in Python, you can use the scipy.stats library. Here's an example:\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Observed frequencies\n",
    "observed = [observed frequencies]\n",
    "\n",
    "# Expected frequencies\n",
    "expected = [expected frequencies]\n",
    "\n",
    "# Degrees of freedom\n",
    "df = len(observed) - 1\n",
    "\n",
    "# Perform the chi-square goodness of fit test\n",
    "chi_square_statistic, p_value = stats.chisquare(f_obs=observed, f_exp=expected)\n",
    "\n",
    "# Significance level\n",
    "alpha = 0.05\n",
    "\n",
    "# Check if the p-value is less than alpha to make a decision\n",
    "if p_value < alpha:\n",
    "    print(\"Reject the null hypothesis: The observed distribution differs from the expected distribution.\")\n",
    "else:\n",
    "    print(\"Fail to reject the null hypothesis: The observed distribution does not significantly differ from the expected distribution.\")\n",
    "This code will perform a chi-square goodness of fit test to determine if the distribution of colors of M&Ms matches the expected distribution.\n",
    "\n",
    "Q3: You provided the data for a chi-square test but didn't include the data. To calculate the chi-square statistic and p-value for a contingency table, you can use the scipy.stats library as follows:\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Create a contingency table (replace with your data)\n",
    "observed = [[observed frequencies]]\n",
    "# Perform the chi-square test\n",
    "chi_square_statistic, p_value, dof, expected = stats.chi2_contingency(observed)\n",
    "\n",
    "print(\"Chi-square statistic:\", chi_square_statistic)\n",
    "print(\"p-value:\", p_value)\n",
    "print(\"Degrees of freedom:\", dof)\n",
    "print(\"Expected frequencies:\", expected)\n",
    "Interpretation: The chi-square statistic measures the degree of association between variables. The p-value assesses the significance of this association. If p-value < 0.05 (assuming a 5% significance level), you can reject the null hypothesis, indicating a significant association between variables.\n",
    "\n",
    "Q4: To calculate the 95% confidence interval for the true proportion of individuals who smoke in the population based on a sample of 60 out of 500 individuals, you can use Python as follows:\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Sample size\n",
    "sample_size = 500\n",
    "\n",
    "# Sample proportion\n",
    "sample_proportion = 60 / sample_size\n",
    "\n",
    "# Confidence level\n",
    "confidence_level = 0.95\n",
    "\n",
    "# Calculate the standard error\n",
    "standard_error = (sample_proportion * (1 - sample_proportion) / sample_size) ** 0.5\n",
    "\n",
    "# Calculate the margin of error (MOE)\n",
    "margin_of_error = stats.norm.ppf((1 + confidence_level) / 2) * standard_error\n",
    "\n",
    "# Calculate the confidence interval\n",
    "confidence_interval = (sample_proportion - margin_of_error, sample_proportion + margin_of_error)\n",
    "\n",
    "print(\"95% Confidence Interval:\", confidence_intervalmargin_of_error = stats.norm.ppf((1 + confidence_level) /\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c653711d-c0e0-4435-8703-64fe029fc560",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Sample data\n",
    "sample_mean = 75\n",
    "sample_std_dev = 12\n",
    "sample_size = # Your sample size\n",
    "\n",
    "# Confidence level\n",
    "confidence_level = 0.90\n",
    "\n",
    "# Calculate the margin of error (MOE)\n",
    "margin_of_error = stats.norm.ppf((1 + confidence_level) / 2) * (sample_std_dev / (sample_size ** 0.5))\n",
    "\n",
    "# Calculate the confidence interval\n",
    "confidence_interval = (sample_mean - margin_of_error, sample_mean + margin_of_error)\n",
    "\n",
    "print(\"90% Confidence Interval:\", confidence_interval)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "946cf3d6-8aed-496a-8e3d-c702b8eed6a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "\n",
    "df = 10  # Degrees of freedom\n",
    "x = np.linspace(0, 30, 1000)  # Range of x values\n",
    "\n",
    "# Probability density function for chi-square distribution\n",
    "pdf = stats.chi2.pdf(x, df)\n",
    "\n",
    "# Plot the chi-square distribution\n",
    "plt.plot(x, pdf, label=f'Chi-Square Distribution (df={df})')\n",
    "plt.xlabel('Chi-Square Statistic')\n",
    "plt.ylabel('Probability Density')\n",
    "plt.legend()\n",
    "plt.title('Chi-Square Distribution')\n",
    "plt.fill_between(x, pdf, where=(x >= 15), color='gray', alpha=0.5, label='Shaded Area (Chi-Square > 15)')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "This code will plot the chi-square distribution with 10 degrees of freedom and shade the area corresponding to a chi-square statistic greater than 15.\n",
    "\n",
    "Q7: To calculate a 99% confidence interval for the true proportion of people who prefer Coke based on a random sample of 1000 people where 520 preferred Coke:\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Sample size\n",
    "sample_size = 1000\n",
    "\n",
    "# Sample proportion\n",
    "sample_proportion = 520 / sample_size\n",
    "\n",
    "# Confidence level\n",
    "confidence_level = 0.99\n",
    "\n",
    "# Calculate the standard error\n",
    "standard_error = (sample_proportion * (1 - sample_proportion) / sample_size) ** 0.5\n",
    "\n",
    "# Calculate the margin of error (MOE)\n",
    "margin_of_error = stats.norm.ppf((1 + confidence_level) / 2) * standard_error\n",
    "\n",
    "# Calculate the confidence interval\n",
    "confidence_interval = (sample_proportion - margin_of_error, sample_proportion + margin_of_error)\n",
    "\n",
    "print(\"99% Confidence Interval:\", confidence_interval)\n",
    "Interpretation: We are 99% confident that the true proportion of people who prefer Coke in the population falls within the interval [lower bound, upper bound]. In this case, it might be something like [0.4822, 0.5578].\n",
    "\n",
    "Q8: To conduct a chi-square goodness of\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
