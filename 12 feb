{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e657810-eed2-4cac-a499-6befa5ec9609",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-1The main difference between exceptions and syntax errors:\n",
    "\n",
    "Exceptions: These occur during the runtime of a program and are raised when an operation cannot be performed due to some exceptional condition. Examples include ZeroDivisionError, FileNotFoundError, and ValueError. Exceptions can be caught and handled using try and except blocks.\n",
    "\n",
    "Syntax Errors: These occur during the parsing of the program, before it even begins to run. Syntax errors are due to incorrect syntax in the code and prevent the program from running. Examples include missing colons, undefined variables, or incorrect indentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a3a7d80-f4c0-42af-9de2-72ba3984aa6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-2def divide(a, b):\n",
    "    return a / b\n",
    "\n",
    "result = divide(5, 0)  # This will raise a ZeroDivisionError\n",
    "print(\"Result:\", result)  # This line won't be reached"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62bf6b49-ed46-4b08-9901-effddbb5679c",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-3def divide(a, b):\n",
    "    if b == 0:\n",
    "        raise ZeroDivisionError(\"Division by zero is not allowed\")\n",
    "    return a / b\n",
    "try:\n",
    "    result = divide(5, 0)\n",
    "except ZeroDivisionError as e:\n",
    "    print(\"Error:\", e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bdd99fc-2ccd-4b01-a734-2b67b2c561cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-4def divide(a, b):\n",
    "    try:\n",
    "        result = a / b\n",
    "    except ZeroDivisionError:\n",
    "        print(\"Error: Division by zero\")\n",
    "    else:\n",
    "        print(\"Result:\", result)\n",
    "    finally:\n",
    "        print(\"Execution completed\")\n",
    "\n",
    "# Example 1: Handling an exception\n",
    "divide(5, 0)\n",
    "\n",
    "# Example 2: Successful division\n",
    "divide(10, 2)\n",
    "\n",
    "# Example 3: Raising a custom exception\n",
    "def custom_exception_example():\n",
    "    try:\n",
    "        raise ValueError(\"Custom exception raised\")\n",
    "    except ValueError as e:\n",
    "        print(\"Custom Exception:\", e)\n",
    "\n",
    "custom_exception_example()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b2c0f88-fd44-483d-a179-438799730388",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-5class CustomError(Exception):\n",
    "    def __init__(self, message):\n",
    "        super().__init__(message)\n",
    "\n",
    "def validate_age(age):\n",
    "    if age < 18:\n",
    "        raise CustomError(\"Age must be 18 or older\")\n",
    "\n",
    "try:\n",
    "    age = 16\n",
    "    validate_age(age)\n",
    "except CustomError as e:\n",
    "    print(\"Custom Error:\", e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b58049ec-6641-4f6d-98a7-9f09026444e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-6class MyCustomException(Exception):\n",
    "    def __init__(self, message):\n",
    "        super().__init__(message)\n",
    "\n",
    "# Function that can raise the custom exception\n",
    "def divide(a, b):\n",
    "    if b == 0:\n",
    "        raise MyCustomException(\"Division by zero is not allowed\")\n",
    "    return a / b\n",
    "\n",
    "try:\n",
    "    result = divide(10, 0)\n",
    "except MyCustomException as e:\n",
    "    print(\"Custom Exception:\", e)\n",
    "else:\n",
    "    print(\"Result:\", result)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
