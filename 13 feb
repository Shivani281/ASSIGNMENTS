{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1369aca5-f3ec-4ead-9687-8357afb0bf61",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 1) (1050596228.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[1], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    When creating custom exceptions in Python, it is advisable to inherit from the base class Exception or one of its subclasses. Here's why:\u001b[0m\n\u001b[0m                                                                                                                                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unterminated string literal (detected at line 1)\n"
     ]
    }
   ],
   "source": [
    "When creating custom exceptions in Python, it is advisable to inherit from the base class Exception or one of its subclasses. Here's why:\n",
    "\n",
    "Consistency: Inheriting from Exception or one of its subclasses ensures that your custom exception follows the standard Python exception hierarchy and behaves consistently with other built-in exceptions. This makes it easier for others (and yourself) to understand and work with your code.\n",
    "\n",
    "Exception Handling: Python's exception handling mechanism is built around the concept of catching and handling exceptions based on their types. By inheriting from the Exception class, you enable your custom exception to be caught and handled in the same way as built-in exceptions. This allows for more precise error handling in your code.\n",
    "\n",
    "Clarity: Using the Exception class as the base for custom exceptions makes your code more readable and self-explanatory. When someone reads your code, they immediately \n",
    "recognize that your class represents an exception.\n",
    "\n",
    "Documentation: Python's built-in exception hierarchy serves as documentation for the standard exceptions provided by the language. By inheriting from these classes, you convey the intent and behavior of your custom exception more clearly to other developers.\n",
    "\n",
    "Here's an example of creating a custom exception that inherits from the Exception class:\n",
    "class CustomError(Exception):\n",
    "    def __init__(self, message):\n",
    "        super().__init__(message)\n",
    "\n",
    "# Raise the custom exception\n",
    "try:\n",
    "    raise CustomError(\"This is a custom exception.\")\n",
    "except CustomError as e:\n",
    "    print(f\"Caught custom exception: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5b88a07-023a-4458-8589-5a45ef4bc57e",
   "metadata": {},
   "outputs": [],
   "source": [
    "BaseException\n",
    " +-- SystemExit\n",
    " +-- KeyboardInterrupt\n",
    " +-- Exception\n",
    "      +-- StopIteration\n",
    "      +-- ArithmeticError\n",
    "      |    +-- ZeroDivisionError\n",
    "      |    +-- ...\n",
    "      +-- AssertionError\n",
    "      +-- ...\n",
    "      +-- CustomError (Custom exceptions should inherit from Exception or its subclasses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c349dcc4-7983-401a-a12f-c6f3e2d13867",
   "metadata": {},
   "outputs": [],
   "source": [
    "The ArithmeticError class is a base class for exceptions related to arithmetic operations. Two common errors defined within this class are:\n",
    "\n",
    "ZeroDivisionError: Raised when you attempt to divide a number by zero.\n",
    "\n",
    "python\n",
    "Copy code\n",
    "try:\n",
    "    result = 10 / 0\n",
    "except ZeroDivisionError as e:\n",
    "    print(f\"Error: {e}\")\n",
    "OverflowError: Raised when an arithmetic operation exceeds the limits of the data type.\n",
    "\n",
    "python\n",
    "Copy code\n",
    "import sys\n",
    "try:\n",
    "    large_number = sys.maxsize + 1\n",
    "except OverflowError as e:\n",
    "    print(f\"Error: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e334ce0-5aa8-4257-af4f-89d1b32c9d4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "The LookupError class is a base class for exceptions related to accessing sequences (lists, tuples, dictionaries) and mappings. Two common subclasses are KeyError and IndexError:\n",
    "\n",
    "KeyError: Raised when you try to access a dictionary using a key that does not exist.\n",
    "\n",
    "python\n",
    "Copy code\n",
    "my_dict = {'apple': 5, 'banana': 3}\n",
    "try:\n",
    "    value = my_dict['grape']  # 'grape' key doesn't exist\n",
    "except KeyError as e:\n",
    "    print(f\"KeyError: {e}\")\n",
    "    my_list = [1, 2, 3]\n",
    "try:\n",
    "    value = my_list[5]  # Index 5 is out of bounds\n",
    "except IndexError as e:\n",
    "    print(f\"IndexError: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ea659c4-8d71-49db-8f07-23925589b88c",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_list = [1, 2, 3]\n",
    "try:\n",
    "    value = my_list[5]  # Index 5 is out of bounds\n",
    "except IndexError as e:\n",
    "    print(f\"IndexError: {e}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
