{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aef574c7-df08-4eeb-860e-0b534b57e67c",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-4 def count_divisions_by_3(number):\n",
    "    count = 0\n",
    "    while number > 10:\n",
    "        number /= 3\n",
    "        count += 1\n",
    "    return count\n",
    "\n",
    "# Example usage:\n",
    "input_number = float(input(\"Enter a number: \"))\n",
    "divisions = count_divisions_by_3(input_number)\n",
    "print(f\"The number can be divided by 3 {divisions} times before it's less than or equal to 10.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f8f305a-4da2-4a0c-8e7e-9d7cb4108112",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-5A while loop in Python is used when you want to repeatedly execute a block of code as long as a certain condition is true. It provides a way to create a loop that continues executing until the specified condition becomes false. While loops are particularly useful when you don't know in advance how many times the loop should run, and you want to keep looping until a specific condition is met. Here's a detailed explanation with examples:\n",
    "\n",
    "Syntax:\n",
    "\n",
    "python\n",
    "Copy code\n",
    "while condition:\n",
    "    # Code to be executed as long as the condition is True\n",
    "    # Example 1: Counting from 1 to 5 using a while loop\n",
    "count = 1\n",
    "while count <= 5:\n",
    "    print(count)\n",
    "    count += "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da4bf268-be5e-41f3-aa63-76ca86ed7e53",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-6# Example 1: Counting from 1 to 5 using a while loop\n",
    "count = 1\n",
    "while count <= 5:\n",
    "    print(count)\n",
    "    count += \n",
    "    # Pattern 2: Inverted Right-Angled Triangle\n",
    "n = 5  # Change n to control the size of the triangle\n",
    "i = n\n",
    "\n",
    "while i >= 1:\n",
    "    j = 1\n",
    "    while j <= i:\n",
    "        print(\"*\", end=\" \")\n",
    "        j += 1\n",
    "    print()\n",
    "    i -= 1\n",
    "    # Pattern 3: Square Pattern\n",
    "n = 4  # Change n to control the size of the square\n",
    "i = 1\n",
    "\n",
    "while i <= n:\n",
    "    j = 1\n",
    "    while j <= n:\n",
    "        print(\"*\", end=\" \")\n",
    "        j += 1\n",
    "    print()\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0b059cf-5fd7-4694-aa23-a35da0a5ec8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "ans-7# Pattern 3: Square Pattern\n",
    "n = 4  # Change n to control the size of the square\n",
    "i = 1\n",
    "\n",
    "while i <= n:\n",
    "    j = 1\n",
    "    while j <= n:\n",
    "        print(\"*\", end=\" \")\n",
    "        j += 1\n",
    "    print()\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ee07db1-300f-41ad-b450-365a0725b6b5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
