{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c1e1d96-e269-4f75-90e6-02805b260fcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "Flask is a micro web framework for Python. It is designed to be lightweight and easy to use, making it an excellent choice for building web applications, particularly small to medium-sized ones. Some advantages of Flask include:\n",
    "\n",
    "Simplicity: Flask has a simple and intuitive API that is easy to understand and work with, making it a good choice for beginners.\n",
    "\n",
    "Minimalistic: Flask provides only the essential components for web development, allowing developers to choose and integrate additional libraries as needed.\n",
    "\n",
    "Flexibility: Flask doesn't impose a specific project structure, database ORM, or template engine, giving developers the freedom to choose the tools and components that best suit their project's requirements.\n",
    "\n",
    "Extensibility: Flask can be extended with various Flask extensions and third-party libraries to add functionality like authentication, database integration, and more.\n",
    "\n",
    "Built-in Development Server: Flask comes with a built-in development server, making it easy to test and develop web applications locally.Widely Used: Flask has a large and active community, which means there is a wealth of documentation, tutorials, and third-party extensions available."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "088866f8-67fb-4527-b68c-ee1a37e33050",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/')\n",
    "def hello_world():\n",
    "    return 'Hello World!!'\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "402d1617-bb3c-4833-a2ca-a2c2f217ab04",
   "metadata": {},
   "outputs": [],
   "source": [
    "App routing in Flask refers to the process of mapping URLs to specific functions or view handlers within a Flask application. When a user accesses a particular URL, Flask's routing mechanism determines which Python function should handle the request and generate a response. App routing is a fundamental concept in Flask and is used for defining the behavior of different routes (URLs) in your web application.\n",
    "\n",
    "We use app routes for the following reasons:\n",
    "\n",
    "URL Mapping: App routes define the URLs that a Flask application can handle and map them to specific Python functions. This allows for clean and organized URL structure.\n",
    "\n",
    "Request Handling: Each app route specifies what should happen when a user accesses a particular URL. This includes generating HTML content, processing form data, and returning responses.\n",
    "\n",
    "RESTful APIs: App routes are crucial when building RESTful APIs with Flask. Different routes correspond to different API endpoints, each with its own functionality.Dynamic Content: App routes can include dynamic parts in URLs (e.g., /user/<username>) and extract data from the URL for processing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7634a631-ff7e-4386-952c-7d2a755f67bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/welcome')\n",
    "def welcome():\n",
    "    return 'Welcome to ABC Corporation'\n",
    "\n",
    "@app.route('/')\n",
    "def company_info():\n",
    "    return '''\n",
    "    Company Name: ABC Corporation\n",
    "    Location: India\n",
    "    Contact Detail: 999-999-9999\n",
    "    '''\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run()\n",
    "To run this code, save it in a .py file, run the script, and access http://127.0.0.1:5000/welcome and http://127.0.0.1:5000/ in your web browser to see the respective messages. You can capture screenshots using your operating system's screenshot functionality.\n",
    "\n",
    "Q5. What function is used in Flask for URL Building? Write a Python code to demonstrate the working of the url_for() function.\n",
    "\n",
    "In Flask, the url_for() function is used for URL building. It generates a URL for a given view function based on its name and any route arguments it may require. This function is handy because it allows you to avoid hardcoding URLs in your templates and code, making your application more maintainable.\n",
    "\n",
    "Here's an example demonstrating the use of url_for():\n",
    "\n",
    "python\n",
    "Copy code\n",
    "from flask import Flask, render_template, url_for\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/')\n",
    "def index():\n",
    "    return 'This is the index page. <a href=\"' + url_for('about') + '\">About</a>'\n",
    "\n",
    "@app.route('/about')\n",
    "def about():\n",
    "    return 'This is the about page. <a href=\"' + url_for('index') + '\">Home</a>'\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run()\n",
    "In this example, the url_for() function is used to generate URLs for the \"index\" and \"about\" routes. When you access the \"/about\" route, it provides a link to the home page (\"/\") generated using url_for(). Similarly, the home page provides a link to the about page. This way, you can change the routes without having to update all the links manually.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07789844-640d-4e18-8cb4-f418345c730e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask, render_template, url_for\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/')\n",
    "def index():\n",
    "    return 'This is the index page. <a href=\"' + url_for('about') + '\">About</a>'\n",
    "\n",
    "@app.route('/about')\n",
    "def about():\n",
    "    return 'This is the about page. <a href=\"' + url_for('index') + '\">Home</a>'\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
